# File: vulnerability_check.rb

require 'net/http'
require 'uri'

# Main function to check if the website is up and perform vulnerability checks
def check_vulnerability(url)
  # Parse the given URL
  uri = URI.parse(url)
  
  # Send a GET request to the URL
  response = Net::HTTP.get_response(uri)

  # Check if the website is up (status code 200)
  if response.code.to_i == 200
    puts "Website is up and running"
    
    # Check for missing security headers
    check_security_headers(response)
    
    # Perform basic vulnerability checks (XSS, SQLi)
    check_basic_vulnerabilities(uri)
  else
    # If the status code is not 200, consider the website down
    puts "Website is down or inaccessible. Status code: #{response.code}"
  end
end

# Function to check if common security headers are missing
def check_security_headers(response)
  # Convert the response headers to a hash for easier access
  headers = response.to_hash
  
  # Array to store missing headers
  missing_headers = []

  # Check for the presence of common security headers
  missing_headers << "X-Frame-Options" unless headers['x-frame-options']
  missing_headers << "X-Content-Type-Options" unless headers['x-content-type-options']
  missing_headers << "Strict-Transport-Security" unless headers['strict-transport-security']
  missing_headers << "Content-Security-Policy" unless headers['content-security-policy']

  # Output the missing headers if any, otherwise state that all are present
  if missing_headers.any?
    puts "Missing security headers: #{missing_headers.join(', ')}"
  else
    puts "All essential security headers are present."
  end
end

# Function to check for basic vulnerabilities (XSS, SQLi)
def check_basic_vulnerabilities(uri)
  # XSS Test: Inject a script tag to check for Cross-Site Scripting vulnerability
  xss_payload = "<script>alert(1)</script>"
  xss_uri = URI(uri.to_s + "?q=" + URI.encode_www_form_component(xss_payload))
  xss_response = Net::HTTP.get_response(xss_uri)

  # If the payload is reflected in the response, XSS may be present
  if xss_response.body.include?(xss_payload)
    puts "Potential XSS vulnerability detected!"
  else
    puts "No XSS vulnerability detected."
  end

  # SQLi Test: Inject a basic SQL Injection payload to check for vulnerability
  sqli_payload = "' OR '1'='1"
  sqli_uri = URI(uri.to_s + "?id=" + URI.encode_www_form_component(sqli_payload))
  sqli_response = Net::HTTP.get_response(sqli_uri)

  # If SQL syntax error is detected, the site may be vulnerable to SQL Injection
  if sqli_response.body.include?("error in your SQL syntax")
    puts "Potential SQL Injection vulnerability detected!"
  else
    puts "No SQL Injection vulnerability detected."
  end
end

# Example usage: Replace 'https://example.com' with the target website
check_vulnerability('https://example.com')

#########################################
# How to use this script:
#
# 1. Save this file with a `.rb` extension, e.g., `vulnerability_check.rb`
# 2. In a terminal, navigate to the directory where the file is saved.
# 3. Run the script using Ruby by typing the following command:
#
#    ruby vulnerability_check.rb
#
# 4. Replace 'https://example.com' with the actual URL you want to test.
#
# The script will:
# - Check if the website is up.
# - Identify missing security headers.
# - Perform basic vulnerability tests like XSS and SQL Injection.
#
# You can enhance this script by adding more complex payloads or checks.
#########################################
