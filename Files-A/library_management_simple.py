# Code generated by Gemini just for learning practice
class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.is_available = True

    def __str__(self):
        return f"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}, Available: {self.is_available}"

    def borrow(self):
        if self.is_available:
            self.is_available = False
            return True
        else:
            return False

    def return_book(self):
        self.is_available = True

class Member:
    def __init__(self, member_id, name):
        self.member_id = member_id
        self.name = name
        self.borrowed_books = []

    def __str__(self):
        borrowed_str = ", ".join([book.title for book in self.borrowed_books])
        return f"Member ID: {self.member_id}, Name: {self.name}, Borrowed Books: [{borrowed_str}]"

    def borrow_book(self, book):
        self.borrowed_books.append(book)

    def return_book(self, book):
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            return True
        return False

class Library:
    def __init__(self):
        self.books = []
        self.members = []

    def add_book(self, book):
        self.books.append(book)
        print(f"Book '{book.title}' added to the library.")

    def add_member(self, member):
        self.members.append(member)
        print(f"Member '{member.name}' added to the library.")

    def find_book(self, title):
        for book in self.books:
            if book.title.lower() == title.lower():
                return book
        return None

    def find_member(self, member_id):
        for member in self.members:
            if member.member_id == member_id:
                return member
        return None

    def borrow_book(self, member_id, book_title):
        member = self.find_member(member_id)
        book = self.find_book(book_title)

        if not member:
            print(f"Member with ID {member_id} not found.")
            return False
        if not book:
            print(f"Book '{book_title}' not found in the library.")
            return False
        if not book.is_available:
            print(f"Book '{book_title}' is currently unavailable.")
            return False

        if book.borrow():
            member.borrow_book(book)
            print(f"Member '{member.name}' borrowed '{book.title}'.")
            return True
        else:
            print(f"Failed to borrow '{book.title}'.")
            return False

    def return_book(self, member_id, book_title):
        member = self.find_member(member_id)
        book = self.find_book(book_title)

        if not member:
            print(f"Member with ID {member_id} not found.")
            return False
        if not book:
            print(f"Book '{book_title}' not found in the library.")
            return False

        if member.return_book(book):
            book.return_book()
            print(f"Member '{member.name}' returned '{book.title}'.")
            return True
        else:
            print(f"Member '{member.name}' did not borrow '{book.title}'.")
            return False

    def display_available_books(self):
        print("\n--- Available Books ---")
        available_count = 0
        for book in self.books:
            if book.is_available:
                print(book)
                available_count += 1
        if available_count == 0:
            print("No books currently available.")

    def display_borrowed_books(self):
        print("\n--- Borrowed Books ---")
        borrowed_count = 0
        for book in self.books:
            if not book.is_available:
                print(book)
                borrowed_count += 1
        if borrowed_count == 0:
            print("No books currently borrowed.")

    def display_members(self):
        print("\n--- Library Members ---")
        if self.members:
            for member in self.members:
                print(member)
        else:
            print("No members in the library yet.")

# --- Example Usage ---
if __name__ == "__main__":
    library = Library()

    # Add books
    book1 = Book("The Hitchhiker's Guide to the Galaxy", "Douglas Adams", "978-0345391803")
    book2 = Book("Pride and Prejudice", "Jane Austen", "978-0141439518")
    book3 = Book("To Kill a Mockingbird", "Harper Lee", "978-0061120084")
    library.add_book(book1)
    library.add_book(book2)
    library.add_book(book3)

    # Add members
    member1 = Member(101, "Alice Smith")
    member2 = Member(102, "Bob Johnson")
    library.add_member(member1)
    library.add_member(member2)

    library.display_available_books()
    library.display_members()

    # Borrow a book
    library.borrow_book(101, "The Hitchhiker's Guide to the Galaxy")
    library.borrow_book(102, "Pride and Prejudice")
    library.borrow_book(101, "Pride and Prejudice") # Try to borrow an already borrowed book

    library.display_available_books()
    library.display_borrowed_books()
    library.display_members() # Alice and Bob will now show borrowed books

    # Return a book
    library.return_book(101, "The Hitchhiker's Guide to the Galaxy")

    library.display_available_books()
    library.display_borrowed_books()
    library.display_members() # Alice's borrowed book list should be updated
